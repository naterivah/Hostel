<?php

namespace Bittich\HotelBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Doctrine\ORM\EntityRepository;

/**
 * CalendrierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalendrierRepository extends EntityRepository {

    //pour ne faire qu'une seule requete (jointure)
    public function getCalendrierAvecChambresDisponibles(\DateTime $arrivee,\DateTime $depart) {
        $qb = $this->createQueryBuilder('a')
                #->leftJoin('a.tarif', 't')
                ->leftJoin('a.chambres', 'c')
                ->where('a.datej between :arrivee and :depart')
                ->setParameter('arrivee', $arrivee->format('Y-m-d'))
                ->setParameter('depart', $depart->format('Y-m-d'))
                #->addSelect('t')
                ->addSelect('c')
                ->orderBy('a.datej', 'ASC');
        return $qb->getQuery()
                        ->getResult();
    }
    public function findAll(){
        $qb = $this->createQueryBuilder('a')
                ->orderBy('a.datej', 'ASC');
        return $qb->getQuery()
                        ->getResult();
        
        
    }
        public function getCalendrierAvecTarif() {
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.tarif', 't')
                ->leftJoin('a.chambres', 'c')
                ->addSelect('t')
                ->addSelect('c')
                ->orderBy('a.datej', 'ASC');
        return $qb->getQuery()
                        ->getResult();
    }
    
    
        public function pagine($nombreParPage, $page) {
        if ($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "' . $page . '").');
        }
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.tarif', 't')
                ->leftJoin('a.chambres', 'c')
                ->addSelect('t')
                ->addSelect('c')
                ->orderBy('a.datej', 'ASC');
        $qb->setFirstResult(($page - 1) * $nombreParPage)
                ->setMaxResults($nombreParPage);
        return new Paginator($qb);
    }

}
